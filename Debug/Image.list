
Image.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c38  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002be4  08001d44  08001d44  00002d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004928  08004928  00006014  2**0
                  CONTENTS
  4 .ARM          00000000  08004928  08004928  00006014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004928  08004928  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004928  08004928  00005928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800492c  0800492c  0000592c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004930  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000014  08004944  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08004944  000060e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005a5d  00000000  00000000  0000603d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015a7  00000000  00000000  0000ba9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  0000d048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004f8  00000000  00000000  0000d700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cdc  00000000  00000000  0000dbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008225  00000000  00000000  000248d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000811f2  00000000  00000000  0002caf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000adceb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000196c  00000000  00000000  000add30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000af69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d2c 	.word	0x08001d2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08001d2c 	.word	0x08001d2c

0800014c <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	ILI9341_SPI_Init();
 8000150:	f000 f900 	bl	8000354 <ILI9341_SPI_Init>

	/* Reset The Screen */
	ILI9341_Reset();
 8000154:	f000 f946 	bl	80003e4 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 8000158:	2001      	movs	r0, #1
 800015a:	f000 fa0c 	bl	8000576 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 800015e:	20cb      	movs	r0, #203	@ 0xcb
 8000160:	f000 fa09 	bl	8000576 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 8000164:	2039      	movs	r0, #57	@ 0x39
 8000166:	f000 fa15 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 800016a:	202c      	movs	r0, #44	@ 0x2c
 800016c:	f000 fa12 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000170:	2000      	movs	r0, #0
 8000172:	f000 fa0f 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8000176:	2034      	movs	r0, #52	@ 0x34
 8000178:	f000 fa0c 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 800017c:	2002      	movs	r0, #2
 800017e:	f000 fa09 	bl	8000594 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 8000182:	20cf      	movs	r0, #207	@ 0xcf
 8000184:	f000 f9f7 	bl	8000576 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000188:	2000      	movs	r0, #0
 800018a:	f000 fa03 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800018e:	20c1      	movs	r0, #193	@ 0xc1
 8000190:	f000 fa00 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8000194:	2030      	movs	r0, #48	@ 0x30
 8000196:	f000 f9fd 	bl	8000594 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 800019a:	20e8      	movs	r0, #232	@ 0xe8
 800019c:	f000 f9eb 	bl	8000576 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 80001a0:	2085      	movs	r0, #133	@ 0x85
 80001a2:	f000 f9f7 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f000 f9f4 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 80001ac:	2078      	movs	r0, #120	@ 0x78
 80001ae:	f000 f9f1 	bl	8000594 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 80001b2:	20ea      	movs	r0, #234	@ 0xea
 80001b4:	f000 f9df 	bl	8000576 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80001b8:	2000      	movs	r0, #0
 80001ba:	f000 f9eb 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80001be:	2000      	movs	r0, #0
 80001c0:	f000 f9e8 	bl	8000594 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 80001c4:	20ed      	movs	r0, #237	@ 0xed
 80001c6:	f000 f9d6 	bl	8000576 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 80001ca:	2064      	movs	r0, #100	@ 0x64
 80001cc:	f000 f9e2 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80001d0:	2003      	movs	r0, #3
 80001d2:	f000 f9df 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 80001d6:	2012      	movs	r0, #18
 80001d8:	f000 f9dc 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 80001dc:	2081      	movs	r0, #129	@ 0x81
 80001de:	f000 f9d9 	bl	8000594 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 80001e2:	20f7      	movs	r0, #247	@ 0xf7
 80001e4:	f000 f9c7 	bl	8000576 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 80001e8:	2020      	movs	r0, #32
 80001ea:	f000 f9d3 	bl	8000594 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 80001ee:	20c0      	movs	r0, #192	@ 0xc0
 80001f0:	f000 f9c1 	bl	8000576 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80001f4:	2010      	movs	r0, #16
 80001f6:	f000 f9cd 	bl	8000594 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 80001fa:	20c1      	movs	r0, #193	@ 0xc1
 80001fc:	f000 f9bb 	bl	8000576 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000200:	2010      	movs	r0, #16
 8000202:	f000 f9c7 	bl	8000594 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8000206:	20c5      	movs	r0, #197	@ 0xc5
 8000208:	f000 f9b5 	bl	8000576 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 800020c:	203e      	movs	r0, #62	@ 0x3e
 800020e:	f000 f9c1 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 8000212:	2028      	movs	r0, #40	@ 0x28
 8000214:	f000 f9be 	bl	8000594 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 8000218:	20c7      	movs	r0, #199	@ 0xc7
 800021a:	f000 f9ac 	bl	8000576 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 800021e:	2086      	movs	r0, #134	@ 0x86
 8000220:	f000 f9b8 	bl	8000594 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 8000224:	2036      	movs	r0, #54	@ 0x36
 8000226:	f000 f9a6 	bl	8000576 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 800022a:	2048      	movs	r0, #72	@ 0x48
 800022c:	f000 f9b2 	bl	8000594 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 8000230:	203a      	movs	r0, #58	@ 0x3a
 8000232:	f000 f9a0 	bl	8000576 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 8000236:	2055      	movs	r0, #85	@ 0x55
 8000238:	f000 f9ac 	bl	8000594 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 800023c:	20b1      	movs	r0, #177	@ 0xb1
 800023e:	f000 f99a 	bl	8000576 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f9a6 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 8000248:	2018      	movs	r0, #24
 800024a:	f000 f9a3 	bl	8000594 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 800024e:	20b6      	movs	r0, #182	@ 0xb6
 8000250:	f000 f991 	bl	8000576 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 8000254:	2008      	movs	r0, #8
 8000256:	f000 f99d 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 800025a:	2082      	movs	r0, #130	@ 0x82
 800025c:	f000 f99a 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 8000260:	2027      	movs	r0, #39	@ 0x27
 8000262:	f000 f997 	bl	8000594 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 8000266:	20f2      	movs	r0, #242	@ 0xf2
 8000268:	f000 f985 	bl	8000576 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800026c:	2000      	movs	r0, #0
 800026e:	f000 f991 	bl	8000594 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 8000272:	2026      	movs	r0, #38	@ 0x26
 8000274:	f000 f97f 	bl	8000576 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000278:	2001      	movs	r0, #1
 800027a:	f000 f98b 	bl	8000594 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 800027e:	20e0      	movs	r0, #224	@ 0xe0
 8000280:	f000 f979 	bl	8000576 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8000284:	200f      	movs	r0, #15
 8000286:	f000 f985 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 800028a:	2031      	movs	r0, #49	@ 0x31
 800028c:	f000 f982 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8000290:	202b      	movs	r0, #43	@ 0x2b
 8000292:	f000 f97f 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8000296:	200c      	movs	r0, #12
 8000298:	f000 f97c 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 800029c:	200e      	movs	r0, #14
 800029e:	f000 f979 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80002a2:	2008      	movs	r0, #8
 80002a4:	f000 f976 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 80002a8:	204e      	movs	r0, #78	@ 0x4e
 80002aa:	f000 f973 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 80002ae:	20f1      	movs	r0, #241	@ 0xf1
 80002b0:	f000 f970 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 80002b4:	2037      	movs	r0, #55	@ 0x37
 80002b6:	f000 f96d 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80002ba:	2007      	movs	r0, #7
 80002bc:	f000 f96a 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 80002c0:	2010      	movs	r0, #16
 80002c2:	f000 f967 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80002c6:	2003      	movs	r0, #3
 80002c8:	f000 f964 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80002cc:	200e      	movs	r0, #14
 80002ce:	f000 f961 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 80002d2:	2009      	movs	r0, #9
 80002d4:	f000 f95e 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80002d8:	2000      	movs	r0, #0
 80002da:	f000 f95b 	bl	8000594 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 80002de:	20e1      	movs	r0, #225	@ 0xe1
 80002e0:	f000 f949 	bl	8000576 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80002e4:	2000      	movs	r0, #0
 80002e6:	f000 f955 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80002ea:	200e      	movs	r0, #14
 80002ec:	f000 f952 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 80002f0:	2014      	movs	r0, #20
 80002f2:	f000 f94f 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80002f6:	2003      	movs	r0, #3
 80002f8:	f000 f94c 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 80002fc:	2011      	movs	r0, #17
 80002fe:	f000 f949 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000302:	2007      	movs	r0, #7
 8000304:	f000 f946 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000308:	2031      	movs	r0, #49	@ 0x31
 800030a:	f000 f943 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800030e:	20c1      	movs	r0, #193	@ 0xc1
 8000310:	f000 f940 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 8000314:	2048      	movs	r0, #72	@ 0x48
 8000316:	f000 f93d 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800031a:	2008      	movs	r0, #8
 800031c:	f000 f93a 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8000320:	200f      	movs	r0, #15
 8000322:	f000 f937 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8000326:	200c      	movs	r0, #12
 8000328:	f000 f934 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 800032c:	2031      	movs	r0, #49	@ 0x31
 800032e:	f000 f931 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 8000332:	2036      	movs	r0, #54	@ 0x36
 8000334:	f000 f92e 	bl	8000594 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8000338:	200f      	movs	r0, #15
 800033a:	f000 f92b 	bl	8000594 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 800033e:	2011      	movs	r0, #17
 8000340:	f000 f919 	bl	8000576 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 8000344:	2029      	movs	r0, #41	@ 0x29
 8000346:	f000 f916 	bl	8000576 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 800034a:	202c      	movs	r0, #44	@ 0x2c
 800034c:	f000 f922 	bl	8000594 <ILI9341_Send_Data>
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}

08000354 <ILI9341_SPI_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void ILI9341_SPI_Init() {
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	lcd_spi.Instance 				= SPI1;
 8000358:	4b17      	ldr	r3, [pc, #92]	@ (80003b8 <ILI9341_SPI_Init+0x64>)
 800035a:	4a18      	ldr	r2, [pc, #96]	@ (80003bc <ILI9341_SPI_Init+0x68>)
 800035c:	601a      	str	r2, [r3, #0]
	lcd_spi.Init.Mode 				= SPI_MODE_MASTER;
 800035e:	4b16      	ldr	r3, [pc, #88]	@ (80003b8 <ILI9341_SPI_Init+0x64>)
 8000360:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000364:	605a      	str	r2, [r3, #4]
	lcd_spi.Init.Direction 			= SPI_DIRECTION_2LINES;
 8000366:	4b14      	ldr	r3, [pc, #80]	@ (80003b8 <ILI9341_SPI_Init+0x64>)
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]
	lcd_spi.Init.DataSize 			= SPI_DATASIZE_8BIT;
 800036c:	4b12      	ldr	r3, [pc, #72]	@ (80003b8 <ILI9341_SPI_Init+0x64>)
 800036e:	2200      	movs	r2, #0
 8000370:	60da      	str	r2, [r3, #12]
	lcd_spi.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 8000372:	4b11      	ldr	r3, [pc, #68]	@ (80003b8 <ILI9341_SPI_Init+0x64>)
 8000374:	2200      	movs	r2, #0
 8000376:	611a      	str	r2, [r3, #16]
	lcd_spi.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 8000378:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <ILI9341_SPI_Init+0x64>)
 800037a:	2200      	movs	r2, #0
 800037c:	615a      	str	r2, [r3, #20]
	lcd_spi.Init.NSS 				= SPI_NSS_SOFT;
 800037e:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <ILI9341_SPI_Init+0x64>)
 8000380:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000384:	619a      	str	r2, [r3, #24]
	lcd_spi.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_2;
 8000386:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <ILI9341_SPI_Init+0x64>)
 8000388:	2200      	movs	r2, #0
 800038a:	61da      	str	r2, [r3, #28]
	lcd_spi.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 800038c:	4b0a      	ldr	r3, [pc, #40]	@ (80003b8 <ILI9341_SPI_Init+0x64>)
 800038e:	2200      	movs	r2, #0
 8000390:	621a      	str	r2, [r3, #32]
	lcd_spi.Init.TIMode 			= SPI_TIMODE_DISABLE;
 8000392:	4b09      	ldr	r3, [pc, #36]	@ (80003b8 <ILI9341_SPI_Init+0x64>)
 8000394:	2200      	movs	r2, #0
 8000396:	625a      	str	r2, [r3, #36]	@ 0x24
	lcd_spi.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE;
 8000398:	4b07      	ldr	r3, [pc, #28]	@ (80003b8 <ILI9341_SPI_Init+0x64>)
 800039a:	2200      	movs	r2, #0
 800039c:	629a      	str	r2, [r3, #40]	@ 0x28
	lcd_spi.Init.CRCPolynomial 		= 10;
 800039e:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <ILI9341_SPI_Init+0x64>)
 80003a0:	220a      	movs	r2, #10
 80003a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&lcd_spi) != HAL_OK) {
 80003a4:	4804      	ldr	r0, [pc, #16]	@ (80003b8 <ILI9341_SPI_Init+0x64>)
 80003a6:	f001 fa27 	bl	80017f8 <HAL_SPI_Init>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <ILI9341_SPI_Init+0x60>
		Error_Handler();
 80003b0:	f000 fa70 	bl	8000894 <Error_Handler>
	}
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000030 	.word	0x20000030
 80003bc:	40013000 	.word	0x40013000

080003c0 <ILI9341_SPI_Send>:

void ILI9341_SPI_Send(unsigned char data)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&lcd_spi, &data, 1, 1);
 80003ca:	1df9      	adds	r1, r7, #7
 80003cc:	2301      	movs	r3, #1
 80003ce:	2201      	movs	r2, #1
 80003d0:	4803      	ldr	r0, [pc, #12]	@ (80003e0 <ILI9341_SPI_Send+0x20>)
 80003d2:	f001 fa95 	bl	8001900 <HAL_SPI_Transmit>
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000030 	.word	0x20000030

080003e4 <ILI9341_Reset>:
void ILI9341_SPI_Send_Multiple(unsigned char data, int size)
{
	HAL_SPI_Transmit(&lcd_spi, &data, size, 10);
}

void ILI9341_Reset() {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	RESET_ON;
 80003e8:	2200      	movs	r2, #0
 80003ea:	2101      	movs	r1, #1
 80003ec:	480e      	ldr	r0, [pc, #56]	@ (8000428 <ILI9341_Reset+0x44>)
 80003ee:	f000 fe0d 	bl	800100c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80003f2:	2032      	movs	r0, #50	@ 0x32
 80003f4:	f000 fb7e 	bl	8000af4 <HAL_Delay>
	RESET_OFF;
 80003f8:	2201      	movs	r2, #1
 80003fa:	2101      	movs	r1, #1
 80003fc:	480a      	ldr	r0, [pc, #40]	@ (8000428 <ILI9341_Reset+0x44>)
 80003fe:	f000 fe05 	bl	800100c <HAL_GPIO_WritePin>
	CS_ON;
 8000402:	2200      	movs	r2, #0
 8000404:	2104      	movs	r1, #4
 8000406:	4808      	ldr	r0, [pc, #32]	@ (8000428 <ILI9341_Reset+0x44>)
 8000408:	f000 fe00 	bl	800100c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800040c:	2032      	movs	r0, #50	@ 0x32
 800040e:	f000 fb71 	bl	8000af4 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8000412:	2001      	movs	r0, #1
 8000414:	f000 f8af 	bl	8000576 <ILI9341_Send_Command>
	CS_OFF;
 8000418:	2201      	movs	r2, #1
 800041a:	2104      	movs	r1, #4
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <ILI9341_Reset+0x44>)
 800041e:	f000 fdf5 	bl	800100c <HAL_GPIO_WritePin>
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40010800 	.word	0x40010800

0800042c <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8000436:	2036      	movs	r0, #54	@ 0x36
 8000438:	f000 f89d 	bl	8000576 <ILI9341_Send_Command>
	switch (rotation) {
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	2b03      	cmp	r3, #3
 8000440:	d836      	bhi.n	80004b0 <ILI9341_Set_Rotation+0x84>
 8000442:	a201      	add	r2, pc, #4	@ (adr r2, 8000448 <ILI9341_Set_Rotation+0x1c>)
 8000444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000448:	08000459 	.word	0x08000459
 800044c:	0800046f 	.word	0x0800046f
 8000450:	08000485 	.word	0x08000485
 8000454:	0800049b 	.word	0x0800049b
	case 0:
		ILI9341_Send_Data(0x48);
 8000458:	2048      	movs	r0, #72	@ 0x48
 800045a:	f000 f89b 	bl	8000594 <ILI9341_Send_Data>
		X_SIZE = 240;
 800045e:	4b16      	ldr	r3, [pc, #88]	@ (80004b8 <ILI9341_Set_Rotation+0x8c>)
 8000460:	22f0      	movs	r2, #240	@ 0xf0
 8000462:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8000464:	4b15      	ldr	r3, [pc, #84]	@ (80004bc <ILI9341_Set_Rotation+0x90>)
 8000466:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800046a:	601a      	str	r2, [r3, #0]
		break;
 800046c:	e020      	b.n	80004b0 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 800046e:	2028      	movs	r0, #40	@ 0x28
 8000470:	f000 f890 	bl	8000594 <ILI9341_Send_Data>
		X_SIZE = 320;
 8000474:	4b10      	ldr	r3, [pc, #64]	@ (80004b8 <ILI9341_Set_Rotation+0x8c>)
 8000476:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800047a:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 800047c:	4b0f      	ldr	r3, [pc, #60]	@ (80004bc <ILI9341_Set_Rotation+0x90>)
 800047e:	22f0      	movs	r2, #240	@ 0xf0
 8000480:	601a      	str	r2, [r3, #0]
		break;
 8000482:	e015      	b.n	80004b0 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 8000484:	2088      	movs	r0, #136	@ 0x88
 8000486:	f000 f885 	bl	8000594 <ILI9341_Send_Data>
		X_SIZE = 240;
 800048a:	4b0b      	ldr	r3, [pc, #44]	@ (80004b8 <ILI9341_Set_Rotation+0x8c>)
 800048c:	22f0      	movs	r2, #240	@ 0xf0
 800048e:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8000490:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <ILI9341_Set_Rotation+0x90>)
 8000492:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000496:	601a      	str	r2, [r3, #0]
		break;
 8000498:	e00a      	b.n	80004b0 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 800049a:	20e8      	movs	r0, #232	@ 0xe8
 800049c:	f000 f87a 	bl	8000594 <ILI9341_Send_Data>
		X_SIZE = 320;
 80004a0:	4b05      	ldr	r3, [pc, #20]	@ (80004b8 <ILI9341_Set_Rotation+0x8c>)
 80004a2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80004a6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80004a8:	4b04      	ldr	r3, [pc, #16]	@ (80004bc <ILI9341_Set_Rotation+0x90>)
 80004aa:	22f0      	movs	r2, #240	@ 0xf0
 80004ac:	601a      	str	r2, [r3, #0]
		break;
 80004ae:	bf00      	nop
	}
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000000 	.word	0x20000000
 80004bc:	20000004 	.word	0x20000004

080004c0 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80004cc:	2200      	movs	r2, #0
 80004ce:	2104      	movs	r1, #4
 80004d0:	4815      	ldr	r0, [pc, #84]	@ (8000528 <ILI9341_SPI_Send_32+0x68>)
 80004d2:	f000 fd9b 	bl	800100c <HAL_GPIO_WritePin>
	DC_COMMAND;
 80004d6:	2200      	movs	r2, #0
 80004d8:	2102      	movs	r1, #2
 80004da:	4813      	ldr	r0, [pc, #76]	@ (8000528 <ILI9341_SPI_Send_32+0x68>)
 80004dc:	f000 fd96 	bl	800100c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	4618      	mov	r0, r3
 80004e4:	f7ff ff6c 	bl	80003c0 <ILI9341_SPI_Send>

	DC_DATA;
 80004e8:	2201      	movs	r2, #1
 80004ea:	2102      	movs	r1, #2
 80004ec:	480e      	ldr	r0, [pc, #56]	@ (8000528 <ILI9341_SPI_Send_32+0x68>)
 80004ee:	f000 fd8d 	bl	800100c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	0e1b      	lsrs	r3, r3, #24
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff ff61 	bl	80003c0 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	0c1b      	lsrs	r3, r3, #16
 8000502:	b2db      	uxtb	r3, r3
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff ff5b 	bl	80003c0 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	0a1b      	lsrs	r3, r3, #8
 800050e:	b2db      	uxtb	r3, r3
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff ff55 	bl	80003c0 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	b2db      	uxtb	r3, r3
 800051a:	4618      	mov	r0, r3
 800051c:	f7ff ff50 	bl	80003c0 <ILI9341_SPI_Send>

}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40010800 	.word	0x40010800

0800052c <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
 8000538:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	617b      	str	r3, [r7, #20]
	t <<= 16;
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	041b      	lsls	r3, r3, #16
 8000542:	617b      	str	r3, [r7, #20]
	t |= x2;
 8000544:	697a      	ldr	r2, [r7, #20]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 800054c:	6979      	ldr	r1, [r7, #20]
 800054e:	202a      	movs	r0, #42	@ 0x2a
 8000550:	f7ff ffb6 	bl	80004c0 <ILI9341_SPI_Send_32>
	t = y1;
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	041b      	lsls	r3, r3, #16
 800055c:	617b      	str	r3, [r7, #20]
	t |= y2;
 800055e:	697a      	ldr	r2, [r7, #20]
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	4313      	orrs	r3, r2
 8000564:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 8000566:	6979      	ldr	r1, [r7, #20]
 8000568:	202b      	movs	r0, #43	@ 0x2b
 800056a:	f7ff ffa9 	bl	80004c0 <ILI9341_SPI_Send_32>
}
 800056e:	bf00      	nop
 8000570:	3718      	adds	r7, #24
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <ILI9341_Send_Command>:
		}
	break;
	}
}

static void ILI9341_Send_Command(unsigned char command) {
 8000576:	b580      	push	{r7, lr}
 8000578:	b082      	sub	sp, #8
 800057a:	af00      	add	r7, sp, #0
 800057c:	4603      	mov	r3, r0
 800057e:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000580:	f000 f86c 	bl	800065c <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff ff1a 	bl	80003c0 <ILI9341_SPI_Send>
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 800059e:	f000 f84d 	bl	800063c <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ff0b 	bl	80003c0 <ILI9341_SPI_Send>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <ILI9341_Draw_Double_Pixel>:
	}
	CS_OFF;
}

void ILI9341_Draw_Double_Pixel(int x, int y, unsigned int color1, unsigned int color2)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
 80005c0:	603b      	str	r3, [r7, #0]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	db2e      	blt.n	8000626 <ILI9341_Draw_Double_Pixel+0x72>
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	db2b      	blt.n	8000626 <ILI9341_Draw_Double_Pixel+0x72>
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	4b17      	ldr	r3, [pc, #92]	@ (8000630 <ILI9341_Draw_Double_Pixel+0x7c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d226      	bcs.n	8000626 <ILI9341_Draw_Double_Pixel+0x72>
 80005d8:	68ba      	ldr	r2, [r7, #8]
 80005da:	4b16      	ldr	r3, [pc, #88]	@ (8000634 <ILI9341_Draw_Double_Pixel+0x80>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d221      	bcs.n	8000626 <ILI9341_Draw_Double_Pixel+0x72>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 80005e2:	68f8      	ldr	r0, [r7, #12]
 80005e4:	68b9      	ldr	r1, [r7, #8]
 80005e6:	4b12      	ldr	r3, [pc, #72]	@ (8000630 <ILI9341_Draw_Double_Pixel+0x7c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	1e5a      	subs	r2, r3, #1
 80005ec:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <ILI9341_Draw_Double_Pixel+0x80>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	f7ff ff9b 	bl	800052c <ILI9341_Set_Address>
	DC_COMMAND;
 80005f6:	2200      	movs	r2, #0
 80005f8:	2102      	movs	r1, #2
 80005fa:	480f      	ldr	r0, [pc, #60]	@ (8000638 <ILI9341_Draw_Double_Pixel+0x84>)
 80005fc:	f000 fd06 	bl	800100c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000600:	202c      	movs	r0, #44	@ 0x2c
 8000602:	f7ff fedd 	bl	80003c0 <ILI9341_SPI_Send>
	DC_DATA;
 8000606:	2201      	movs	r2, #1
 8000608:	2102      	movs	r1, #2
 800060a:	480b      	ldr	r0, [pc, #44]	@ (8000638 <ILI9341_Draw_Double_Pixel+0x84>)
 800060c:	f000 fcfe 	bl	800100c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color1);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff fed3 	bl	80003c0 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color2);
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fece 	bl	80003c0 <ILI9341_SPI_Send>
 8000624:	e000      	b.n	8000628 <ILI9341_Draw_Double_Pixel+0x74>
		return;
 8000626:	bf00      	nop
}
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000000 	.word	0x20000000
 8000634:	20000004 	.word	0x20000004
 8000638:	40010800 	.word	0x40010800

0800063c <Before_Sending_Data>:
			}
		break;
	}
}

static void Before_Sending_Data() {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	2102      	movs	r1, #2
 8000644:	4804      	ldr	r0, [pc, #16]	@ (8000658 <Before_Sending_Data+0x1c>)
 8000646:	f000 fce1 	bl	800100c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	2104      	movs	r1, #4
 800064e:	4802      	ldr	r0, [pc, #8]	@ (8000658 <Before_Sending_Data+0x1c>)
 8000650:	f000 fcdc 	bl	800100c <HAL_GPIO_WritePin>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40010800 	.word	0x40010800

0800065c <Before_Sending_Command>:

static void Before_Sending_Command() {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2102      	movs	r1, #2
 8000664:	4804      	ldr	r0, [pc, #16]	@ (8000678 <Before_Sending_Command+0x1c>)
 8000666:	f000 fcd1 	bl	800100c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2104      	movs	r1, #4
 800066e:	4802      	ldr	r0, [pc, #8]	@ (8000678 <Before_Sending_Command+0x1c>)
 8000670:	f000 fccc 	bl	800100c <HAL_GPIO_WritePin>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40010800 	.word	0x40010800

0800067c <Display_Color_Picture>:
}



void Display_Color_Picture()
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < 280; i++)
 8000682:	2300      	movs	r3, #0
 8000684:	80fb      	strh	r3, [r7, #6]
 8000686:	e029      	b.n	80006dc <Display_Color_Picture+0x60>
	{
		for (uint16_t j = 0; j < 320; j++)
 8000688:	2300      	movs	r3, #0
 800068a:	80bb      	strh	r3, [r7, #4]
 800068c:	e01f      	b.n	80006ce <Display_Color_Picture+0x52>
		{
			ILI9341_Draw_Double_Pixel(j, i, ironman[(640 * i) + j * 2], ironman[(640 * i) + j * 2 + 1]);
 800068e:	88b8      	ldrh	r0, [r7, #4]
 8000690:	88f9      	ldrh	r1, [r7, #6]
 8000692:	88fa      	ldrh	r2, [r7, #6]
 8000694:	4613      	mov	r3, r2
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	4413      	add	r3, r2
 800069a:	019b      	lsls	r3, r3, #6
 800069c:	461a      	mov	r2, r3
 800069e:	88bb      	ldrh	r3, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <Display_Color_Picture+0x74>)
 80006a6:	5cd3      	ldrb	r3, [r2, r3]
 80006a8:	461c      	mov	r4, r3
 80006aa:	88fa      	ldrh	r2, [r7, #6]
 80006ac:	4613      	mov	r3, r2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4413      	add	r3, r2
 80006b2:	019b      	lsls	r3, r3, #6
 80006b4:	461a      	mov	r2, r3
 80006b6:	88bb      	ldrh	r3, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	3301      	adds	r3, #1
 80006be:	4a0c      	ldr	r2, [pc, #48]	@ (80006f0 <Display_Color_Picture+0x74>)
 80006c0:	5cd3      	ldrb	r3, [r2, r3]
 80006c2:	4622      	mov	r2, r4
 80006c4:	f7ff ff76 	bl	80005b4 <ILI9341_Draw_Double_Pixel>
		for (uint16_t j = 0; j < 320; j++)
 80006c8:	88bb      	ldrh	r3, [r7, #4]
 80006ca:	3301      	adds	r3, #1
 80006cc:	80bb      	strh	r3, [r7, #4]
 80006ce:	88bb      	ldrh	r3, [r7, #4]
 80006d0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80006d4:	d3db      	bcc.n	800068e <Display_Color_Picture+0x12>
	for (uint16_t i = 0; i < 280; i++)
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	3301      	adds	r3, #1
 80006da:	80fb      	strh	r3, [r7, #6]
 80006dc:	88fb      	ldrh	r3, [r7, #6]
 80006de:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80006e2:	d3d1      	bcc.n	8000688 <Display_Color_Picture+0xc>
		}
	}


}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd90      	pop	{r4, r7, pc}
 80006ee:	bf00      	nop
 80006f0:	08001d44 	.word	0x08001d44

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 f99a 	bl	8000a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f811 	bl	8000722 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f000 f88a 	bl	8000818 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000704:	f000 f852 	bl	80007ac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 8000708:	f7ff fd20 	bl	800014c <ILI9341_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ILI9341_Set_Rotation(3);
 800070c:	2003      	movs	r0, #3
 800070e:	f7ff fe8d 	bl	800042c <ILI9341_Set_Rotation>
	  Display_Color_Picture();
 8000712:	f7ff ffb3 	bl	800067c <Display_Color_Picture>
  	  HAL_Delay(1000);
 8000716:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800071a:	f000 f9eb 	bl	8000af4 <HAL_Delay>
	  ILI9341_Set_Rotation(3);
 800071e:	bf00      	nop
 8000720:	e7f4      	b.n	800070c <main+0x18>

08000722 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b090      	sub	sp, #64	@ 0x40
 8000726:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000728:	f107 0318 	add.w	r3, r7, #24
 800072c:	2228      	movs	r2, #40	@ 0x28
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f001 facf 	bl	8001cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000744:	2301      	movs	r3, #1
 8000746:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000748:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800074c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000752:	2301      	movs	r3, #1
 8000754:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800075e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000760:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000764:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000766:	f107 0318 	add.w	r3, r7, #24
 800076a:	4618      	mov	r0, r3
 800076c:	f000 fc66 	bl	800103c <HAL_RCC_OscConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000776:	f000 f88d 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077a:	230f      	movs	r3, #15
 800077c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077e:	2302      	movs	r3, #2
 8000780:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000786:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800078a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2102      	movs	r1, #2
 8000794:	4618      	mov	r0, r3
 8000796:	f000 fed3 	bl	8001540 <HAL_RCC_ClockConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007a0:	f000 f878 	bl	8000894 <Error_Handler>
  }
}
 80007a4:	bf00      	nop
 80007a6:	3740      	adds	r7, #64	@ 0x40
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b0:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007b2:	4a18      	ldr	r2, [pc, #96]	@ (8000814 <MX_SPI1_Init+0x68>)
 80007b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007b6:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007be:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c4:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007de:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007e0:	2208      	movs	r2, #8
 80007e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f0:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007f8:	220a      	movs	r2, #10
 80007fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007fe:	f000 fffb 	bl	80017f8 <HAL_SPI_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000808:	f000 f844 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000088 	.word	0x20000088
 8000814:	40013000 	.word	0x40013000

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082c:	4b17      	ldr	r3, [pc, #92]	@ (800088c <MX_GPIO_Init+0x74>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a16      	ldr	r2, [pc, #88]	@ (800088c <MX_GPIO_Init+0x74>)
 8000832:	f043 0320 	orr.w	r3, r3, #32
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b14      	ldr	r3, [pc, #80]	@ (800088c <MX_GPIO_Init+0x74>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0320 	and.w	r3, r3, #32
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_GPIO_Init+0x74>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a10      	ldr	r2, [pc, #64]	@ (800088c <MX_GPIO_Init+0x74>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_GPIO_Init+0x74>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2107      	movs	r1, #7
 8000860:	480b      	ldr	r0, [pc, #44]	@ (8000890 <MX_GPIO_Init+0x78>)
 8000862:	f000 fbd3 	bl	800100c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000866:	2307      	movs	r3, #7
 8000868:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2302      	movs	r3, #2
 8000874:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	4619      	mov	r1, r3
 800087c:	4804      	ldr	r0, [pc, #16]	@ (8000890 <MX_GPIO_Init+0x78>)
 800087e:	f000 fa41 	bl	8000d04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000
 8000890:	40010800 	.word	0x40010800

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <Error_Handler+0x8>

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008a6:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <HAL_MspInit+0x5c>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	4a14      	ldr	r2, [pc, #80]	@ (80008fc <HAL_MspInit+0x5c>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6193      	str	r3, [r2, #24]
 80008b2:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <HAL_MspInit+0x5c>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <HAL_MspInit+0x5c>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	4a0e      	ldr	r2, [pc, #56]	@ (80008fc <HAL_MspInit+0x5c>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c8:	61d3      	str	r3, [r2, #28]
 80008ca:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <HAL_MspInit+0x5c>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <HAL_MspInit+0x60>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	4a04      	ldr	r2, [pc, #16]	@ (8000900 <HAL_MspInit+0x60>)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	40021000 	.word	0x40021000
 8000900:	40010000 	.word	0x40010000

08000904 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a15      	ldr	r2, [pc, #84]	@ (8000974 <HAL_SPI_MspInit+0x70>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d123      	bne.n	800096c <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <HAL_SPI_MspInit+0x74>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a13      	ldr	r2, [pc, #76]	@ (8000978 <HAL_SPI_MspInit+0x74>)
 800092a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <HAL_SPI_MspInit+0x74>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093c:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <HAL_SPI_MspInit+0x74>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a0d      	ldr	r2, [pc, #52]	@ (8000978 <HAL_SPI_MspInit+0x74>)
 8000942:	f043 0304 	orr.w	r3, r3, #4
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <HAL_SPI_MspInit+0x74>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0304 	and.w	r3, r3, #4
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000954:	23a0      	movs	r3, #160	@ 0xa0
 8000956:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4619      	mov	r1, r3
 8000966:	4805      	ldr	r0, [pc, #20]	@ (800097c <HAL_SPI_MspInit+0x78>)
 8000968:	f000 f9cc 	bl	8000d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800096c:	bf00      	nop
 800096e:	3720      	adds	r7, #32
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40013000 	.word	0x40013000
 8000978:	40021000 	.word	0x40021000
 800097c:	40010800 	.word	0x40010800

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <NMI_Handler+0x4>

08000988 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <MemManage_Handler+0x4>

08000998 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr

080009c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d0:	f000 f874 	bl	8000abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009e4:	f7ff fff8 	bl	80009d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e8:	480b      	ldr	r0, [pc, #44]	@ (8000a18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009ea:	490c      	ldr	r1, [pc, #48]	@ (8000a1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000a20 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a09      	ldr	r2, [pc, #36]	@ (8000a24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a00:	4c09      	ldr	r4, [pc, #36]	@ (8000a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f001 f969 	bl	8001ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a12:	f7ff fe6f 	bl	80006f4 <main>
  bx lr
 8000a16:	4770      	bx	lr
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a20:	08004930 	.word	0x08004930
  ldr r2, =_sbss
 8000a24:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a28:	200000e4 	.word	0x200000e4

08000a2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC1_2_IRQHandler>
	...

08000a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a34:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <HAL_Init+0x28>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a07      	ldr	r2, [pc, #28]	@ (8000a58 <HAL_Init+0x28>)
 8000a3a:	f043 0310 	orr.w	r3, r3, #16
 8000a3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 f92b 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a46:	200f      	movs	r0, #15
 8000a48:	f000 f808 	bl	8000a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a4c:	f7ff ff28 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40022000 	.word	0x40022000

08000a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <HAL_InitTick+0x54>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <HAL_InitTick+0x58>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f935 	bl	8000cea <HAL_SYSTICK_Config>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e00e      	b.n	8000aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b0f      	cmp	r3, #15
 8000a8e:	d80a      	bhi.n	8000aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a90:	2200      	movs	r2, #0
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	f000 f90b 	bl	8000cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a9c:	4a06      	ldr	r2, [pc, #24]	@ (8000ab8 <HAL_InitTick+0x5c>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e000      	b.n	8000aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	20000010 	.word	0x20000010
 8000ab8:	2000000c 	.word	0x2000000c

08000abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac0:	4b05      	ldr	r3, [pc, #20]	@ (8000ad8 <HAL_IncTick+0x1c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b05      	ldr	r3, [pc, #20]	@ (8000adc <HAL_IncTick+0x20>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	4a03      	ldr	r2, [pc, #12]	@ (8000adc <HAL_IncTick+0x20>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	20000010 	.word	0x20000010
 8000adc:	200000e0 	.word	0x200000e0

08000ae0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b02      	ldr	r3, [pc, #8]	@ (8000af0 <HAL_GetTick+0x10>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	200000e0 	.word	0x200000e0

08000af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000afc:	f7ff fff0 	bl	8000ae0 <HAL_GetTick>
 8000b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b0c:	d005      	beq.n	8000b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <HAL_Delay+0x44>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b1a:	bf00      	nop
 8000b1c:	f7ff ffe0 	bl	8000ae0 <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d8f7      	bhi.n	8000b1c <HAL_Delay+0x28>
  {
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000010 	.word	0x20000010

08000b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6e:	4a04      	ldr	r2, [pc, #16]	@ (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	60d3      	str	r3, [r2, #12]
}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b88:	4b04      	ldr	r3, [pc, #16]	@ (8000b9c <__NVIC_GetPriorityGrouping+0x18>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	f003 0307 	and.w	r3, r3, #7
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db0a      	blt.n	8000bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	490c      	ldr	r1, [pc, #48]	@ (8000bec <__NVIC_SetPriority+0x4c>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc8:	e00a      	b.n	8000be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4908      	ldr	r1, [pc, #32]	@ (8000bf0 <__NVIC_SetPriority+0x50>)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	3b04      	subs	r3, #4
 8000bd8:	0112      	lsls	r2, r2, #4
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	440b      	add	r3, r1
 8000bde:	761a      	strb	r2, [r3, #24]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000e100 	.word	0xe000e100
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	@ 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f1c3 0307 	rsb	r3, r3, #7
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	bf28      	it	cs
 8000c12:	2304      	movcs	r3, #4
 8000c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d902      	bls.n	8000c24 <NVIC_EncodePriority+0x30>
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3b03      	subs	r3, #3
 8000c22:	e000      	b.n	8000c26 <NVIC_EncodePriority+0x32>
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43da      	mvns	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	401a      	ands	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43d9      	mvns	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	4313      	orrs	r3, r2
         );
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3724      	adds	r7, #36	@ 0x24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c68:	d301      	bcc.n	8000c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00f      	b.n	8000c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c98 <SysTick_Config+0x40>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c76:	210f      	movs	r1, #15
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f7ff ff90 	bl	8000ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c80:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <SysTick_Config+0x40>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c86:	4b04      	ldr	r3, [pc, #16]	@ (8000c98 <SysTick_Config+0x40>)
 8000c88:	2207      	movs	r2, #7
 8000c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	e000e010 	.word	0xe000e010

08000c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ff49 	bl	8000b3c <__NVIC_SetPriorityGrouping>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc4:	f7ff ff5e 	bl	8000b84 <__NVIC_GetPriorityGrouping>
 8000cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	6978      	ldr	r0, [r7, #20]
 8000cd0:	f7ff ff90 	bl	8000bf4 <NVIC_EncodePriority>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff5f 	bl	8000ba0 <__NVIC_SetPriority>
}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ffb0 	bl	8000c58 <SysTick_Config>
 8000cf8:	4603      	mov	r3, r0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b08b      	sub	sp, #44	@ 0x2c
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d16:	e169      	b.n	8000fec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f040 8158 	bne.w	8000fe6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	4a9a      	ldr	r2, [pc, #616]	@ (8000fa4 <HAL_GPIO_Init+0x2a0>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d05e      	beq.n	8000dfe <HAL_GPIO_Init+0xfa>
 8000d40:	4a98      	ldr	r2, [pc, #608]	@ (8000fa4 <HAL_GPIO_Init+0x2a0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d875      	bhi.n	8000e32 <HAL_GPIO_Init+0x12e>
 8000d46:	4a98      	ldr	r2, [pc, #608]	@ (8000fa8 <HAL_GPIO_Init+0x2a4>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d058      	beq.n	8000dfe <HAL_GPIO_Init+0xfa>
 8000d4c:	4a96      	ldr	r2, [pc, #600]	@ (8000fa8 <HAL_GPIO_Init+0x2a4>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d86f      	bhi.n	8000e32 <HAL_GPIO_Init+0x12e>
 8000d52:	4a96      	ldr	r2, [pc, #600]	@ (8000fac <HAL_GPIO_Init+0x2a8>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d052      	beq.n	8000dfe <HAL_GPIO_Init+0xfa>
 8000d58:	4a94      	ldr	r2, [pc, #592]	@ (8000fac <HAL_GPIO_Init+0x2a8>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d869      	bhi.n	8000e32 <HAL_GPIO_Init+0x12e>
 8000d5e:	4a94      	ldr	r2, [pc, #592]	@ (8000fb0 <HAL_GPIO_Init+0x2ac>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d04c      	beq.n	8000dfe <HAL_GPIO_Init+0xfa>
 8000d64:	4a92      	ldr	r2, [pc, #584]	@ (8000fb0 <HAL_GPIO_Init+0x2ac>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d863      	bhi.n	8000e32 <HAL_GPIO_Init+0x12e>
 8000d6a:	4a92      	ldr	r2, [pc, #584]	@ (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d046      	beq.n	8000dfe <HAL_GPIO_Init+0xfa>
 8000d70:	4a90      	ldr	r2, [pc, #576]	@ (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d85d      	bhi.n	8000e32 <HAL_GPIO_Init+0x12e>
 8000d76:	2b12      	cmp	r3, #18
 8000d78:	d82a      	bhi.n	8000dd0 <HAL_GPIO_Init+0xcc>
 8000d7a:	2b12      	cmp	r3, #18
 8000d7c:	d859      	bhi.n	8000e32 <HAL_GPIO_Init+0x12e>
 8000d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d84 <HAL_GPIO_Init+0x80>)
 8000d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d84:	08000dff 	.word	0x08000dff
 8000d88:	08000dd9 	.word	0x08000dd9
 8000d8c:	08000deb 	.word	0x08000deb
 8000d90:	08000e2d 	.word	0x08000e2d
 8000d94:	08000e33 	.word	0x08000e33
 8000d98:	08000e33 	.word	0x08000e33
 8000d9c:	08000e33 	.word	0x08000e33
 8000da0:	08000e33 	.word	0x08000e33
 8000da4:	08000e33 	.word	0x08000e33
 8000da8:	08000e33 	.word	0x08000e33
 8000dac:	08000e33 	.word	0x08000e33
 8000db0:	08000e33 	.word	0x08000e33
 8000db4:	08000e33 	.word	0x08000e33
 8000db8:	08000e33 	.word	0x08000e33
 8000dbc:	08000e33 	.word	0x08000e33
 8000dc0:	08000e33 	.word	0x08000e33
 8000dc4:	08000e33 	.word	0x08000e33
 8000dc8:	08000de1 	.word	0x08000de1
 8000dcc:	08000df5 	.word	0x08000df5
 8000dd0:	4a79      	ldr	r2, [pc, #484]	@ (8000fb8 <HAL_GPIO_Init+0x2b4>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d013      	beq.n	8000dfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dd6:	e02c      	b.n	8000e32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	623b      	str	r3, [r7, #32]
          break;
 8000dde:	e029      	b.n	8000e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	3304      	adds	r3, #4
 8000de6:	623b      	str	r3, [r7, #32]
          break;
 8000de8:	e024      	b.n	8000e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	3308      	adds	r3, #8
 8000df0:	623b      	str	r3, [r7, #32]
          break;
 8000df2:	e01f      	b.n	8000e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	330c      	adds	r3, #12
 8000dfa:	623b      	str	r3, [r7, #32]
          break;
 8000dfc:	e01a      	b.n	8000e34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d102      	bne.n	8000e0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e06:	2304      	movs	r3, #4
 8000e08:	623b      	str	r3, [r7, #32]
          break;
 8000e0a:	e013      	b.n	8000e34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d105      	bne.n	8000e20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e14:	2308      	movs	r3, #8
 8000e16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	69fa      	ldr	r2, [r7, #28]
 8000e1c:	611a      	str	r2, [r3, #16]
          break;
 8000e1e:	e009      	b.n	8000e34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e20:	2308      	movs	r3, #8
 8000e22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	69fa      	ldr	r2, [r7, #28]
 8000e28:	615a      	str	r2, [r3, #20]
          break;
 8000e2a:	e003      	b.n	8000e34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	623b      	str	r3, [r7, #32]
          break;
 8000e30:	e000      	b.n	8000e34 <HAL_GPIO_Init+0x130>
          break;
 8000e32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	2bff      	cmp	r3, #255	@ 0xff
 8000e38:	d801      	bhi.n	8000e3e <HAL_GPIO_Init+0x13a>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	e001      	b.n	8000e42 <HAL_GPIO_Init+0x13e>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3304      	adds	r3, #4
 8000e42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	2bff      	cmp	r3, #255	@ 0xff
 8000e48:	d802      	bhi.n	8000e50 <HAL_GPIO_Init+0x14c>
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	e002      	b.n	8000e56 <HAL_GPIO_Init+0x152>
 8000e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e52:	3b08      	subs	r3, #8
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	210f      	movs	r1, #15
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	fa01 f303 	lsl.w	r3, r1, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	401a      	ands	r2, r3
 8000e68:	6a39      	ldr	r1, [r7, #32]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	431a      	orrs	r2, r3
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e84:	4b4d      	ldr	r3, [pc, #308]	@ (8000fbc <HAL_GPIO_Init+0x2b8>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a4c      	ldr	r2, [pc, #304]	@ (8000fbc <HAL_GPIO_Init+0x2b8>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b4a      	ldr	r3, [pc, #296]	@ (8000fbc <HAL_GPIO_Init+0x2b8>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e9c:	4a48      	ldr	r2, [pc, #288]	@ (8000fc0 <HAL_GPIO_Init+0x2bc>)
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a40      	ldr	r2, [pc, #256]	@ (8000fc4 <HAL_GPIO_Init+0x2c0>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d013      	beq.n	8000ef0 <HAL_GPIO_Init+0x1ec>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a3f      	ldr	r2, [pc, #252]	@ (8000fc8 <HAL_GPIO_Init+0x2c4>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d00d      	beq.n	8000eec <HAL_GPIO_Init+0x1e8>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a3e      	ldr	r2, [pc, #248]	@ (8000fcc <HAL_GPIO_Init+0x2c8>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d007      	beq.n	8000ee8 <HAL_GPIO_Init+0x1e4>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a3d      	ldr	r2, [pc, #244]	@ (8000fd0 <HAL_GPIO_Init+0x2cc>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d101      	bne.n	8000ee4 <HAL_GPIO_Init+0x1e0>
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e006      	b.n	8000ef2 <HAL_GPIO_Init+0x1ee>
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	e004      	b.n	8000ef2 <HAL_GPIO_Init+0x1ee>
 8000ee8:	2302      	movs	r3, #2
 8000eea:	e002      	b.n	8000ef2 <HAL_GPIO_Init+0x1ee>
 8000eec:	2301      	movs	r3, #1
 8000eee:	e000      	b.n	8000ef2 <HAL_GPIO_Init+0x1ee>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ef4:	f002 0203 	and.w	r2, r2, #3
 8000ef8:	0092      	lsls	r2, r2, #2
 8000efa:	4093      	lsls	r3, r2
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f02:	492f      	ldr	r1, [pc, #188]	@ (8000fc0 <HAL_GPIO_Init+0x2bc>)
 8000f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f06:	089b      	lsrs	r3, r3, #2
 8000f08:	3302      	adds	r3, #2
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d006      	beq.n	8000f2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	492c      	ldr	r1, [pc, #176]	@ (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	608b      	str	r3, [r1, #8]
 8000f28:	e006      	b.n	8000f38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f2c:	689a      	ldr	r2, [r3, #8]
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	4928      	ldr	r1, [pc, #160]	@ (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d006      	beq.n	8000f52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f44:	4b23      	ldr	r3, [pc, #140]	@ (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f46:	68da      	ldr	r2, [r3, #12]
 8000f48:	4922      	ldr	r1, [pc, #136]	@ (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	60cb      	str	r3, [r1, #12]
 8000f50:	e006      	b.n	8000f60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f52:	4b20      	ldr	r3, [pc, #128]	@ (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f54:	68da      	ldr	r2, [r3, #12]
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	491e      	ldr	r1, [pc, #120]	@ (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d006      	beq.n	8000f7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f6c:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	4918      	ldr	r1, [pc, #96]	@ (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	604b      	str	r3, [r1, #4]
 8000f78:	e006      	b.n	8000f88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f7a:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	4914      	ldr	r1, [pc, #80]	@ (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f84:	4013      	ands	r3, r2
 8000f86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d021      	beq.n	8000fd8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f94:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	490e      	ldr	r1, [pc, #56]	@ (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	600b      	str	r3, [r1, #0]
 8000fa0:	e021      	b.n	8000fe6 <HAL_GPIO_Init+0x2e2>
 8000fa2:	bf00      	nop
 8000fa4:	10320000 	.word	0x10320000
 8000fa8:	10310000 	.word	0x10310000
 8000fac:	10220000 	.word	0x10220000
 8000fb0:	10210000 	.word	0x10210000
 8000fb4:	10120000 	.word	0x10120000
 8000fb8:	10110000 	.word	0x10110000
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010000 	.word	0x40010000
 8000fc4:	40010800 	.word	0x40010800
 8000fc8:	40010c00 	.word	0x40010c00
 8000fcc:	40011000 	.word	0x40011000
 8000fd0:	40011400 	.word	0x40011400
 8000fd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001008 <HAL_GPIO_Init+0x304>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	4909      	ldr	r1, [pc, #36]	@ (8001008 <HAL_GPIO_Init+0x304>)
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe8:	3301      	adds	r3, #1
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f47f ae8e 	bne.w	8000d18 <HAL_GPIO_Init+0x14>
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	372c      	adds	r7, #44	@ 0x2c
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	40010400 	.word	0x40010400

0800100c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	807b      	strh	r3, [r7, #2]
 8001018:	4613      	mov	r3, r2
 800101a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800101c:	787b      	ldrb	r3, [r7, #1]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001022:	887a      	ldrh	r2, [r7, #2]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001028:	e003      	b.n	8001032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800102a:	887b      	ldrh	r3, [r7, #2]
 800102c:	041a      	lsls	r2, r3, #16
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	611a      	str	r2, [r3, #16]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e272      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 8087 	beq.w	800116a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800105c:	4b92      	ldr	r3, [pc, #584]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 030c 	and.w	r3, r3, #12
 8001064:	2b04      	cmp	r3, #4
 8001066:	d00c      	beq.n	8001082 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001068:	4b8f      	ldr	r3, [pc, #572]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 030c 	and.w	r3, r3, #12
 8001070:	2b08      	cmp	r3, #8
 8001072:	d112      	bne.n	800109a <HAL_RCC_OscConfig+0x5e>
 8001074:	4b8c      	ldr	r3, [pc, #560]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800107c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001080:	d10b      	bne.n	800109a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001082:	4b89      	ldr	r3, [pc, #548]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d06c      	beq.n	8001168 <HAL_RCC_OscConfig+0x12c>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d168      	bne.n	8001168 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e24c      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010a2:	d106      	bne.n	80010b2 <HAL_RCC_OscConfig+0x76>
 80010a4:	4b80      	ldr	r3, [pc, #512]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a7f      	ldr	r2, [pc, #508]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	e02e      	b.n	8001110 <HAL_RCC_OscConfig+0xd4>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10c      	bne.n	80010d4 <HAL_RCC_OscConfig+0x98>
 80010ba:	4b7b      	ldr	r3, [pc, #492]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a7a      	ldr	r2, [pc, #488]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	4b78      	ldr	r3, [pc, #480]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a77      	ldr	r2, [pc, #476]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e01d      	b.n	8001110 <HAL_RCC_OscConfig+0xd4>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010dc:	d10c      	bne.n	80010f8 <HAL_RCC_OscConfig+0xbc>
 80010de:	4b72      	ldr	r3, [pc, #456]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a71      	ldr	r2, [pc, #452]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	4b6f      	ldr	r3, [pc, #444]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a6e      	ldr	r2, [pc, #440]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e00b      	b.n	8001110 <HAL_RCC_OscConfig+0xd4>
 80010f8:	4b6b      	ldr	r3, [pc, #428]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a6a      	ldr	r2, [pc, #424]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b68      	ldr	r3, [pc, #416]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a67      	ldr	r2, [pc, #412]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 800110a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800110e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d013      	beq.n	8001140 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fce2 	bl	8000ae0 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fcde 	bl	8000ae0 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	@ 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e200      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	4b5d      	ldr	r3, [pc, #372]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f0      	beq.n	8001120 <HAL_RCC_OscConfig+0xe4>
 800113e:	e014      	b.n	800116a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff fcce 	bl	8000ae0 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001148:	f7ff fcca 	bl	8000ae0 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b64      	cmp	r3, #100	@ 0x64
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e1ec      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115a:	4b53      	ldr	r3, [pc, #332]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0x10c>
 8001166:	e000      	b.n	800116a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d063      	beq.n	800123e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001176:	4b4c      	ldr	r3, [pc, #304]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00b      	beq.n	800119a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001182:	4b49      	ldr	r3, [pc, #292]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 030c 	and.w	r3, r3, #12
 800118a:	2b08      	cmp	r3, #8
 800118c:	d11c      	bne.n	80011c8 <HAL_RCC_OscConfig+0x18c>
 800118e:	4b46      	ldr	r3, [pc, #280]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d116      	bne.n	80011c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119a:	4b43      	ldr	r3, [pc, #268]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d005      	beq.n	80011b2 <HAL_RCC_OscConfig+0x176>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d001      	beq.n	80011b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e1c0      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b2:	4b3d      	ldr	r3, [pc, #244]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4939      	ldr	r1, [pc, #228]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c6:	e03a      	b.n	800123e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d020      	beq.n	8001212 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d0:	4b36      	ldr	r3, [pc, #216]	@ (80012ac <HAL_RCC_OscConfig+0x270>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d6:	f7ff fc83 	bl	8000ae0 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011de:	f7ff fc7f 	bl	8000ae0 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e1a1      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f0:	4b2d      	ldr	r3, [pc, #180]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0f0      	beq.n	80011de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fc:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4927      	ldr	r1, [pc, #156]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 800120c:	4313      	orrs	r3, r2
 800120e:	600b      	str	r3, [r1, #0]
 8001210:	e015      	b.n	800123e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001212:	4b26      	ldr	r3, [pc, #152]	@ (80012ac <HAL_RCC_OscConfig+0x270>)
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001218:	f7ff fc62 	bl	8000ae0 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001220:	f7ff fc5e 	bl	8000ae0 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e180      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001232:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f0      	bne.n	8001220 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d03a      	beq.n	80012c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d019      	beq.n	8001286 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001252:	4b17      	ldr	r3, [pc, #92]	@ (80012b0 <HAL_RCC_OscConfig+0x274>)
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001258:	f7ff fc42 	bl	8000ae0 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001260:	f7ff fc3e 	bl	8000ae0 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e160      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001272:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800127e:	2001      	movs	r0, #1
 8001280:	f000 fa9c 	bl	80017bc <RCC_Delay>
 8001284:	e01c      	b.n	80012c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001286:	4b0a      	ldr	r3, [pc, #40]	@ (80012b0 <HAL_RCC_OscConfig+0x274>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128c:	f7ff fc28 	bl	8000ae0 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001292:	e00f      	b.n	80012b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001294:	f7ff fc24 	bl	8000ae0 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d908      	bls.n	80012b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e146      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000
 80012ac:	42420000 	.word	0x42420000
 80012b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b4:	4b92      	ldr	r3, [pc, #584]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1e9      	bne.n	8001294 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 80a6 	beq.w	800141a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d10d      	bne.n	80012fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	4b88      	ldr	r3, [pc, #544]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	4a87      	ldr	r2, [pc, #540]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e8:	61d3      	str	r3, [r2, #28]
 80012ea:	4b85      	ldr	r3, [pc, #532]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012f6:	2301      	movs	r3, #1
 80012f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fa:	4b82      	ldr	r3, [pc, #520]	@ (8001504 <HAL_RCC_OscConfig+0x4c8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001302:	2b00      	cmp	r3, #0
 8001304:	d118      	bne.n	8001338 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001306:	4b7f      	ldr	r3, [pc, #508]	@ (8001504 <HAL_RCC_OscConfig+0x4c8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a7e      	ldr	r2, [pc, #504]	@ (8001504 <HAL_RCC_OscConfig+0x4c8>)
 800130c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001312:	f7ff fbe5 	bl	8000ae0 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800131a:	f7ff fbe1 	bl	8000ae0 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b64      	cmp	r3, #100	@ 0x64
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e103      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132c:	4b75      	ldr	r3, [pc, #468]	@ (8001504 <HAL_RCC_OscConfig+0x4c8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0f0      	beq.n	800131a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d106      	bne.n	800134e <HAL_RCC_OscConfig+0x312>
 8001340:	4b6f      	ldr	r3, [pc, #444]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4a6e      	ldr	r2, [pc, #440]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6213      	str	r3, [r2, #32]
 800134c:	e02d      	b.n	80013aa <HAL_RCC_OscConfig+0x36e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10c      	bne.n	8001370 <HAL_RCC_OscConfig+0x334>
 8001356:	4b6a      	ldr	r3, [pc, #424]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	4a69      	ldr	r2, [pc, #420]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 800135c:	f023 0301 	bic.w	r3, r3, #1
 8001360:	6213      	str	r3, [r2, #32]
 8001362:	4b67      	ldr	r3, [pc, #412]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	4a66      	ldr	r2, [pc, #408]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001368:	f023 0304 	bic.w	r3, r3, #4
 800136c:	6213      	str	r3, [r2, #32]
 800136e:	e01c      	b.n	80013aa <HAL_RCC_OscConfig+0x36e>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b05      	cmp	r3, #5
 8001376:	d10c      	bne.n	8001392 <HAL_RCC_OscConfig+0x356>
 8001378:	4b61      	ldr	r3, [pc, #388]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4a60      	ldr	r2, [pc, #384]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	6213      	str	r3, [r2, #32]
 8001384:	4b5e      	ldr	r3, [pc, #376]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4a5d      	ldr	r2, [pc, #372]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6213      	str	r3, [r2, #32]
 8001390:	e00b      	b.n	80013aa <HAL_RCC_OscConfig+0x36e>
 8001392:	4b5b      	ldr	r3, [pc, #364]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	4a5a      	ldr	r2, [pc, #360]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001398:	f023 0301 	bic.w	r3, r3, #1
 800139c:	6213      	str	r3, [r2, #32]
 800139e:	4b58      	ldr	r3, [pc, #352]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4a57      	ldr	r2, [pc, #348]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	f023 0304 	bic.w	r3, r3, #4
 80013a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d015      	beq.n	80013de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fb95 	bl	8000ae0 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b8:	e00a      	b.n	80013d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ba:	f7ff fb91 	bl	8000ae0 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e0b1      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0ee      	beq.n	80013ba <HAL_RCC_OscConfig+0x37e>
 80013dc:	e014      	b.n	8001408 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013de:	f7ff fb7f 	bl	8000ae0 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e4:	e00a      	b.n	80013fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e6:	f7ff fb7b 	bl	8000ae0 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e09b      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fc:	4b40      	ldr	r3, [pc, #256]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1ee      	bne.n	80013e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001408:	7dfb      	ldrb	r3, [r7, #23]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d105      	bne.n	800141a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800140e:	4b3c      	ldr	r3, [pc, #240]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a3b      	ldr	r2, [pc, #236]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001414:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001418:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 8087 	beq.w	8001532 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001424:	4b36      	ldr	r3, [pc, #216]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 030c 	and.w	r3, r3, #12
 800142c:	2b08      	cmp	r3, #8
 800142e:	d061      	beq.n	80014f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d146      	bne.n	80014c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001438:	4b33      	ldr	r3, [pc, #204]	@ (8001508 <HAL_RCC_OscConfig+0x4cc>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143e:	f7ff fb4f 	bl	8000ae0 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001446:	f7ff fb4b 	bl	8000ae0 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e06d      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001458:	4b29      	ldr	r3, [pc, #164]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1f0      	bne.n	8001446 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800146c:	d108      	bne.n	8001480 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800146e:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	4921      	ldr	r1, [pc, #132]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 800147c:	4313      	orrs	r3, r2
 800147e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001480:	4b1f      	ldr	r3, [pc, #124]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a19      	ldr	r1, [r3, #32]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001490:	430b      	orrs	r3, r1
 8001492:	491b      	ldr	r1, [pc, #108]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001498:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <HAL_RCC_OscConfig+0x4cc>)
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff fb1f 	bl	8000ae0 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a6:	f7ff fb1b 	bl	8000ae0 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e03d      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014b8:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x46a>
 80014c4:	e035      	b.n	8001532 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <HAL_RCC_OscConfig+0x4cc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fb08 	bl	8000ae0 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d4:	f7ff fb04 	bl	8000ae0 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e026      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e6:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x498>
 80014f2:	e01e      	b.n	8001532 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d107      	bne.n	800150c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e019      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
 8001500:	40021000 	.word	0x40021000
 8001504:	40007000 	.word	0x40007000
 8001508:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800150c:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <HAL_RCC_OscConfig+0x500>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	429a      	cmp	r2, r3
 800151e:	d106      	bne.n	800152e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152a:	429a      	cmp	r2, r3
 800152c:	d001      	beq.n	8001532 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40021000 	.word	0x40021000

08001540 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e0d0      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001554:	4b6a      	ldr	r3, [pc, #424]	@ (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d910      	bls.n	8001584 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001562:	4b67      	ldr	r3, [pc, #412]	@ (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f023 0207 	bic.w	r2, r3, #7
 800156a:	4965      	ldr	r1, [pc, #404]	@ (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001572:	4b63      	ldr	r3, [pc, #396]	@ (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	d001      	beq.n	8001584 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e0b8      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d020      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800159c:	4b59      	ldr	r3, [pc, #356]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	4a58      	ldr	r2, [pc, #352]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0308 	and.w	r3, r3, #8
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015b4:	4b53      	ldr	r3, [pc, #332]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4a52      	ldr	r2, [pc, #328]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80015be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c0:	4b50      	ldr	r3, [pc, #320]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	494d      	ldr	r1, [pc, #308]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d040      	beq.n	8001660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d107      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e6:	4b47      	ldr	r3, [pc, #284]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d115      	bne.n	800161e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e07f      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d107      	bne.n	800160e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fe:	4b41      	ldr	r3, [pc, #260]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d109      	bne.n	800161e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e073      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160e:	4b3d      	ldr	r3, [pc, #244]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e06b      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800161e:	4b39      	ldr	r3, [pc, #228]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f023 0203 	bic.w	r2, r3, #3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	4936      	ldr	r1, [pc, #216]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001630:	f7ff fa56 	bl	8000ae0 <HAL_GetTick>
 8001634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001636:	e00a      	b.n	800164e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001638:	f7ff fa52 	bl	8000ae0 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001646:	4293      	cmp	r3, r2
 8001648:	d901      	bls.n	800164e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e053      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164e:	4b2d      	ldr	r3, [pc, #180]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 020c 	and.w	r2, r3, #12
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	429a      	cmp	r2, r3
 800165e:	d1eb      	bne.n	8001638 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001660:	4b27      	ldr	r3, [pc, #156]	@ (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d210      	bcs.n	8001690 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166e:	4b24      	ldr	r3, [pc, #144]	@ (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 0207 	bic.w	r2, r3, #7
 8001676:	4922      	ldr	r1, [pc, #136]	@ (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800167e:	4b20      	ldr	r3, [pc, #128]	@ (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	d001      	beq.n	8001690 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e032      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d008      	beq.n	80016ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800169c:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	4916      	ldr	r1, [pc, #88]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d009      	beq.n	80016ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016ba:	4b12      	ldr	r3, [pc, #72]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	490e      	ldr	r1, [pc, #56]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016ce:	f000 f821 	bl	8001714 <HAL_RCC_GetSysClockFreq>
 80016d2:	4602      	mov	r2, r0
 80016d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	091b      	lsrs	r3, r3, #4
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	490a      	ldr	r1, [pc, #40]	@ (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 80016e0:	5ccb      	ldrb	r3, [r1, r3]
 80016e2:	fa22 f303 	lsr.w	r3, r2, r3
 80016e6:	4a09      	ldr	r2, [pc, #36]	@ (800170c <HAL_RCC_ClockConfig+0x1cc>)
 80016e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016ea:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <HAL_RCC_ClockConfig+0x1d0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff f9b4 	bl	8000a5c <HAL_InitTick>

  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40022000 	.word	0x40022000
 8001704:	40021000 	.word	0x40021000
 8001708:	08004904 	.word	0x08004904
 800170c:	20000008 	.word	0x20000008
 8001710:	2000000c 	.word	0x2000000c

08001714 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800172e:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	2b04      	cmp	r3, #4
 800173c:	d002      	beq.n	8001744 <HAL_RCC_GetSysClockFreq+0x30>
 800173e:	2b08      	cmp	r3, #8
 8001740:	d003      	beq.n	800174a <HAL_RCC_GetSysClockFreq+0x36>
 8001742:	e027      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001744:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001746:	613b      	str	r3, [r7, #16]
      break;
 8001748:	e027      	b.n	800179a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	0c9b      	lsrs	r3, r3, #18
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	4a17      	ldr	r2, [pc, #92]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001754:	5cd3      	ldrb	r3, [r2, r3]
 8001756:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d010      	beq.n	8001784 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001762:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	0c5b      	lsrs	r3, r3, #17
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	4a11      	ldr	r2, [pc, #68]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800176e:	5cd3      	ldrb	r3, [r2, r3]
 8001770:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a0d      	ldr	r2, [pc, #52]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001776:	fb03 f202 	mul.w	r2, r3, r2
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	e004      	b.n	800178e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a0c      	ldr	r2, [pc, #48]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001788:	fb02 f303 	mul.w	r3, r2, r3
 800178c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	613b      	str	r3, [r7, #16]
      break;
 8001792:	e002      	b.n	800179a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001794:	4b05      	ldr	r3, [pc, #20]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001796:	613b      	str	r3, [r7, #16]
      break;
 8001798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800179a:	693b      	ldr	r3, [r7, #16]
}
 800179c:	4618      	mov	r0, r3
 800179e:	371c      	adds	r7, #28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
 80017ac:	007a1200 	.word	0x007a1200
 80017b0:	08004914 	.word	0x08004914
 80017b4:	08004924 	.word	0x08004924
 80017b8:	003d0900 	.word	0x003d0900

080017bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017c4:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <RCC_Delay+0x34>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <RCC_Delay+0x38>)
 80017ca:	fba2 2303 	umull	r2, r3, r2, r3
 80017ce:	0a5b      	lsrs	r3, r3, #9
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	fb02 f303 	mul.w	r3, r2, r3
 80017d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017d8:	bf00      	nop
  }
  while (Delay --);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	1e5a      	subs	r2, r3, #1
 80017de:	60fa      	str	r2, [r7, #12]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1f9      	bne.n	80017d8 <RCC_Delay+0x1c>
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	20000008 	.word	0x20000008
 80017f4:	10624dd3 	.word	0x10624dd3

080017f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e076      	b.n	80018f8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180e:	2b00      	cmp	r3, #0
 8001810:	d108      	bne.n	8001824 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800181a:	d009      	beq.n	8001830 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
 8001822:	e005      	b.n	8001830 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d106      	bne.n	8001850 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff f85a 	bl	8000904 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2202      	movs	r2, #2
 8001854:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001866:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001878:	431a      	orrs	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018b4:	ea42 0103 	orr.w	r1, r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018bc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	0c1a      	lsrs	r2, r3, #16
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f002 0204 	and.w	r2, r2, #4
 80018d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	69da      	ldr	r2, [r3, #28]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	4613      	mov	r3, r2
 800190e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_SPI_Transmit+0x22>
 800191e:	2302      	movs	r3, #2
 8001920:	e12d      	b.n	8001b7e <HAL_SPI_Transmit+0x27e>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800192a:	f7ff f8d9 	bl	8000ae0 <HAL_GetTick>
 800192e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b01      	cmp	r3, #1
 800193e:	d002      	beq.n	8001946 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001940:	2302      	movs	r3, #2
 8001942:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001944:	e116      	b.n	8001b74 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <HAL_SPI_Transmit+0x52>
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001956:	e10d      	b.n	8001b74 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2203      	movs	r2, #3
 800195c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	88fa      	ldrh	r2, [r7, #6]
 8001970:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	88fa      	ldrh	r2, [r7, #6]
 8001976:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800199e:	d10f      	bne.n	80019c0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80019be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019ca:	2b40      	cmp	r3, #64	@ 0x40
 80019cc:	d007      	beq.n	80019de <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80019e6:	d14f      	bne.n	8001a88 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d002      	beq.n	80019f6 <HAL_SPI_Transmit+0xf6>
 80019f0:	8afb      	ldrh	r3, [r7, #22]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d142      	bne.n	8001a7c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	881a      	ldrh	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	1c9a      	adds	r2, r3, #2
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	3b01      	subs	r3, #1
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a1a:	e02f      	b.n	8001a7c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d112      	bne.n	8001a50 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	881a      	ldrh	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	1c9a      	adds	r2, r3, #2
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001a4e:	e015      	b.n	8001a7c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a50:	f7ff f846 	bl	8000ae0 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d803      	bhi.n	8001a68 <HAL_SPI_Transmit+0x168>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a66:	d102      	bne.n	8001a6e <HAL_SPI_Transmit+0x16e>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d106      	bne.n	8001a7c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001a7a:	e07b      	b.n	8001b74 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1ca      	bne.n	8001a1c <HAL_SPI_Transmit+0x11c>
 8001a86:	e050      	b.n	8001b2a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <HAL_SPI_Transmit+0x196>
 8001a90:	8afb      	ldrh	r3, [r7, #22]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d144      	bne.n	8001b20 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	330c      	adds	r3, #12
 8001aa0:	7812      	ldrb	r2, [r2, #0]
 8001aa2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001abc:	e030      	b.n	8001b20 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d113      	bne.n	8001af4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	330c      	adds	r3, #12
 8001ad6:	7812      	ldrb	r2, [r2, #0]
 8001ad8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001af2:	e015      	b.n	8001b20 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001af4:	f7fe fff4 	bl	8000ae0 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d803      	bhi.n	8001b0c <HAL_SPI_Transmit+0x20c>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0a:	d102      	bne.n	8001b12 <HAL_SPI_Transmit+0x212>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d106      	bne.n	8001b20 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001b1e:	e029      	b.n	8001b74 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1c9      	bne.n	8001abe <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	6839      	ldr	r1, [r7, #0]
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 f8b2 	bl	8001c98 <SPI_EndRxTxTransaction>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d002      	beq.n	8001b40 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10a      	bne.n	8001b5e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b48:	2300      	movs	r3, #0
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	77fb      	strb	r3, [r7, #31]
 8001b6a:	e003      	b.n	8001b74 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8001b7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3720      	adds	r7, #32
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	4613      	mov	r3, r2
 8001b96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001b98:	f7fe ffa2 	bl	8000ae0 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001ba8:	f7fe ff9a 	bl	8000ae0 <HAL_GetTick>
 8001bac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001bae:	4b39      	ldr	r3, [pc, #228]	@ (8001c94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	015b      	lsls	r3, r3, #5
 8001bb4:	0d1b      	lsrs	r3, r3, #20
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	fb02 f303 	mul.w	r3, r2, r3
 8001bbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001bbe:	e054      	b.n	8001c6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc6:	d050      	beq.n	8001c6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001bc8:	f7fe ff8a 	bl	8000ae0 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d902      	bls.n	8001bde <SPI_WaitFlagStateUntilTimeout+0x56>
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d13d      	bne.n	8001c5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001bec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001bf6:	d111      	bne.n	8001c1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c00:	d004      	beq.n	8001c0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c0a:	d107      	bne.n	8001c1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c24:	d10f      	bne.n	8001c46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e017      	b.n	8001c8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	4013      	ands	r3, r2
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	bf0c      	ite	eq
 8001c7a:	2301      	moveq	r3, #1
 8001c7c:	2300      	movne	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d19b      	bne.n	8001bc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000008 	.word	0x20000008

08001c98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af02      	add	r7, sp, #8
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2200      	movs	r2, #0
 8001cac:	2180      	movs	r1, #128	@ 0x80
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f7ff ff6a 	bl	8001b88 <SPI_WaitFlagStateUntilTimeout>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d007      	beq.n	8001cca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cbe:	f043 0220 	orr.w	r2, r3, #32
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e000      	b.n	8001ccc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <memset>:
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4402      	add	r2, r0
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d100      	bne.n	8001cde <memset+0xa>
 8001cdc:	4770      	bx	lr
 8001cde:	f803 1b01 	strb.w	r1, [r3], #1
 8001ce2:	e7f9      	b.n	8001cd8 <memset+0x4>

08001ce4 <__libc_init_array>:
 8001ce4:	b570      	push	{r4, r5, r6, lr}
 8001ce6:	2600      	movs	r6, #0
 8001ce8:	4d0c      	ldr	r5, [pc, #48]	@ (8001d1c <__libc_init_array+0x38>)
 8001cea:	4c0d      	ldr	r4, [pc, #52]	@ (8001d20 <__libc_init_array+0x3c>)
 8001cec:	1b64      	subs	r4, r4, r5
 8001cee:	10a4      	asrs	r4, r4, #2
 8001cf0:	42a6      	cmp	r6, r4
 8001cf2:	d109      	bne.n	8001d08 <__libc_init_array+0x24>
 8001cf4:	f000 f81a 	bl	8001d2c <_init>
 8001cf8:	2600      	movs	r6, #0
 8001cfa:	4d0a      	ldr	r5, [pc, #40]	@ (8001d24 <__libc_init_array+0x40>)
 8001cfc:	4c0a      	ldr	r4, [pc, #40]	@ (8001d28 <__libc_init_array+0x44>)
 8001cfe:	1b64      	subs	r4, r4, r5
 8001d00:	10a4      	asrs	r4, r4, #2
 8001d02:	42a6      	cmp	r6, r4
 8001d04:	d105      	bne.n	8001d12 <__libc_init_array+0x2e>
 8001d06:	bd70      	pop	{r4, r5, r6, pc}
 8001d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d0c:	4798      	blx	r3
 8001d0e:	3601      	adds	r6, #1
 8001d10:	e7ee      	b.n	8001cf0 <__libc_init_array+0xc>
 8001d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d16:	4798      	blx	r3
 8001d18:	3601      	adds	r6, #1
 8001d1a:	e7f2      	b.n	8001d02 <__libc_init_array+0x1e>
 8001d1c:	08004928 	.word	0x08004928
 8001d20:	08004928 	.word	0x08004928
 8001d24:	08004928 	.word	0x08004928
 8001d28:	0800492c 	.word	0x0800492c

08001d2c <_init>:
 8001d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d2e:	bf00      	nop
 8001d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d32:	bc08      	pop	{r3}
 8001d34:	469e      	mov	lr, r3
 8001d36:	4770      	bx	lr

08001d38 <_fini>:
 8001d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d3a:	bf00      	nop
 8001d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d3e:	bc08      	pop	{r3}
 8001d40:	469e      	mov	lr, r3
 8001d42:	4770      	bx	lr
